<?php

namespace Picqer\BolRetailerV4;

// This class is auto generated by OpenApi\ClientGenerator
class Client extends BaseClient
{

    /**
     * Gets all commissions and possible reductions by EAN, condition and optionally price.
     * @param Model\BulkCommissionQuery[] $commissionQueries
     * @return Model\Commission[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getCommissions(array $commissionQueries): array
    {
        $url = "commission";
        $options = [
            'body' => Model\BulkCommissionRequest::constructFromArray(['commissionQueries' => $commissionQueries]),
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\BulkCommissionResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('POST', $url, $options, $responseTypes);
        return $result === null ? [] : $result->commissions;
    }

    /**
     * Commissions can be filtered by condition, which defaults to NEW. If price is provided, the exact commission amount will also be calculated.
     * @param string $ean
     * @param float $unitPrice
     * @param string $condition The condition of the offer.
     * @return Model\Commission|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getCommission(string $ean, float $unitPrice, string $condition = 'NEW'): ?Model\Commission
    {
        $url = "commission/${ean}";
        $options = [
            'query' => [
                'unit-price' => $unitPrice,
                'condition' => $condition,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\Commission::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Create content for existing products or new products.
     * @param Model\CreateProductContentRequest $createProductContentRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postProductContent(Model\CreateProductContentRequest $createProductContentRequest): Model\ProcessStatus
    {
        $url = "content/product";
        $options = [
            'body' => $createProductContentRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve a validation report of the product content upload based on the upload id.
     * @param string $uploadId
     * @return Model\ProductContentResponse[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getValidationReport(string $uploadId): array
    {
        $url = "content/validation-report/${uploadId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\ValidationReportResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->productContents;
    }

    /**
     * A paginated list of all inbound shipments.
     * @param string $reference
     * @param string $bsku
     * @param string $creationStartDate
     * @param string $creationEndDate
     * @param string $state
     * @param int $page The requested page number with a page size of 50 items.
     * @return Model\ReducedInbound[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInbounds(string $reference, string $bsku, string $creationStartDate, string $creationEndDate, string $state, int $page = 1): array
    {
        $url = "inbounds";
        $options = [
            'query' => [
                'reference' => $reference,
                'bsku' => $bsku,
                'creation-start-date' => $creationStartDate,
                'creation-end-date' => $creationEndDate,
                'state' => $state,
                'page' => $page,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\Inbounds::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->inbounds;
    }

    /**
     * Create a new inbound shipment.
     * @param Model\InboundRequest $inboundRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function createInbound(Model\InboundRequest $inboundRequest): Model\ProcessStatus
    {
        $url = "inbounds";
        $options = [
            'body' => $inboundRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve a list of available delivery windows when creating a new inbound shipment.
     * @param string $deliveryDate The expected delivery date for the inbound in ISO 8601 format.
     * @param int $itemsToSend The number of items that will be sent in the inbound.
     * @return Model\TimeSlot[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getDeliveryWindows(string $deliveryDate = 'Today\'s date.', int $itemsToSend = 1): array
    {
        $url = "inbounds/delivery-windows";
        $options = [
            'query' => [
                'delivery-date' => $deliveryDate,
                'items-to-send' => $itemsToSend,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\DeliveryWindowsForInboundShipments::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->timeSlots;
    }

    /**
     * Get all available transporters that carry out transports for inbound shipments.
     * @return Model\Transporter[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInboundTransporters(): array
    {
        $url = "inbounds/inbound-transporters";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\TransportersResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->transporters;
    }

    /**
     * Get inbound product labels by EAN.
     * @param Model\ProductLabelsRequest $productLabelsRequest
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProductLabels(Model\ProductLabelsRequest $productLabelsRequest): ?string
    {
        $url = "inbounds/productlabels";
        $options = [
            'body' => $productLabelsRequest,
            'produces' => 'application/vnd.retailer.v4+pdf',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Get inbound details by inbound id.
     * @param int $inboundId
     * @return Model\Inbound|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInbound(int $inboundId): ?Model\Inbound
    {
        $url = "inbounds/${inboundId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\Inbound::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Get packing list by inbound id.
     * @param int $inboundId
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getPackingList(int $inboundId): ?string
    {
        $url = "inbounds/${inboundId}/packinglist";
        $options = [
            'produces' => 'application/vnd.retailer.v4+pdf',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Get inbound shipping label by inbound id.
     * @param int $inboundId
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInboundShippingLabel(int $inboundId): ?string
    {
        $url = "inbounds/${inboundId}/shippinglabel";
        $options = [
            'produces' => 'application/vnd.retailer.v4+pdf',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets offer insights.
     * @param string $offerId
     * @param string $period
     * @param int $numberOfPeriods
     * @param array $name
     * @return Model\OfferInsight[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getOfferInsights(string $offerId, string $period, int $numberOfPeriods, array $name): array
    {
        $url = "insights/offer";
        $options = [
            'query' => [
                'offer-id' => $offerId,
                'period' => $period,
                'number-of-periods' => $numberOfPeriods,
                'name' => $name,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\OfferInsights::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->offerInsights;
    }

    /**
     * Gets the measurements for your performance indicators per week.
     * @param array $name
     * @param string $year
     * @param string $week
     * @return Model\PerformanceIndicator[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getPerformanceIndicator(array $name, string $year, string $week): array
    {
        $url = "insights/performance/indicator";
        $options = [
            'query' => [
                'name' => $name,
                'year' => $year,
                'week' => $week,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\PerformanceIndicators::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->performanceIndicators;
    }

    /**
     * Gets sales forecast.
     * @param string $offerId
     * @param int $weeksAhead
     * @return Model\SalesForecastResponse
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getSalesForecast(string $offerId, int $weeksAhead): Model\SalesForecastResponse
    {
        $url = "insights/sales-forecast";
        $options = [
            'query' => [
                'offer-id' => $offerId,
                'weeks-ahead' => $weeksAhead,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\SalesForecastResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * The inventory endpoint is a specific LVB/FBB endpoint. It provides a paginated list containing your fulfilment by bol.com inventory. This endpoint does not provide information about your own stock.
     * @param array $quantity
     * @param string $stock
     * @param string $state
     * @param string $query
     * @param int $page The requested page number with a page size of 50 items.
     * @return Model\Inventory[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInventory(array $quantity, string $stock, string $state, string $query, int $page = 1): array
    {
        $url = "inventory";
        $options = [
            'query' => [
                'quantity' => $quantity,
                'stock' => $stock,
                'state' => $state,
                'query' => $query,
                'page' => $page,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\InventoryResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->inventory;
    }

    /**
     * Gets a list of invoices, by default from the past 4 weeks. The optional period-start-date and period-end-date-date parameters can be used together to retrieve invoices from a specific date range in the past, the period can be no longer than 31 days. Invoices and their specifications can be downloaded separately in different media formats with the ‘GET an invoice by id’ and the ‘GET an invoice specification by id’ calls. The available media types differ per invoice and are listed per invoice within the response. Note: the media types listed in the response must be given in our standard API format.
     * @param string $periodStartDate
     * @param string $periodEndDate
     * @return string
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInvoices(string $periodStartDate, string $periodEndDate): string
    {
        $url = "invoices";
        $options = [
            'query' => [
                'period-start-date' => $periodStartDate,
                'period-end-date' => $periodEndDate,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => 'string',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets an invoice by invoice id. The available media types differ per invoice and are listed within the response from the ‘GET all invoices’ call. Note: the media types listed in the response must be given in our standard API format.
     * @param int $invoiceId
     * @return string
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInvoice(int $invoiceId): string
    {
        $url = "invoices/${invoiceId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => 'string',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets an invoice specification for an invoice with a paginated list of its transactions. The available media types differ per invoice specification and are listed within the response from the ‘GET all invoices’ call. Note, the media types listed in the response must be given in our standard API format.
     * @param int $invoiceId
     * @param int $page
     * @return string
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInvoiceSpecification(int $invoiceId, int $page): string
    {
        $url = "invoices/${invoiceId}/specification";
        $options = [
            'query' => [
                'page' => $page,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => 'string',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Creates a new offer, and adds it to the catalog. After creation, status information can be retrieved to review if the offer is valid and published to the shop.
     * @param Model\CreateOfferRequest $createOfferRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postOffer(Model\CreateOfferRequest $createOfferRequest): Model\ProcessStatus
    {
        $url = "offers";
        $options = [
            'body' => $createOfferRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Request an offer export file containing all offers.
     * @param string $format
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postOfferExport(string $format): Model\ProcessStatus
    {
        $url = "offers/export";
        $options = [
            'body' => Model\CreateOfferExportRequest::constructFromArray(['format' => $format]),
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve an offer export file containing all offers.
     * @param string $reportId
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getOfferExport(string $reportId): ?string
    {
        $url = "offers/export/${reportId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+csv',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Request an unpublished offer report containing all unpublished offers and reasons.
     * @param string $format
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postUnpublishedOfferReport(string $format): Model\ProcessStatus
    {
        $url = "offers/unpublished";
        $options = [
            'body' => Model\CreateUnpublishedOfferReportRequest::constructFromArray(['format' => $format]),
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve an unpublished offer report containing all unpublished offers and reasons.
     * @param string $reportId
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getUnpublishedOfferReport(string $reportId): ?string
    {
        $url = "offers/unpublished/${reportId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+csv',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Retrieve an offer by using the offer id provided to you when creating or listing your offers.
     * @param string $offerId
     * @return Model\RetailerOffer|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getOffer(string $offerId): ?Model\RetailerOffer
    {
        $url = "offers/${offerId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\RetailerOffer::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Use this endpoint to send an offer update. This endpoint returns a process status.
     * @param string $offerId
     * @param Model\UpdateOfferRequest $updateOfferRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function putOffer(string $offerId, Model\UpdateOfferRequest $updateOfferRequest): Model\ProcessStatus
    {
        $url = "offers/${offerId}";
        $options = [
            'body' => $updateOfferRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Delete an offer by id.
     * @param string $offerId
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function deleteOffer(string $offerId): Model\ProcessStatus
    {
        $url = "offers/${offerId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('DELETE', $url, $options, $responseTypes);
    }

    /**
     * Update price(s) for offer by id.
     * @param string $offerId
     * @param Model\Pricing $pricing
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function updateOfferPrice(string $offerId, Model\Pricing $pricing): Model\ProcessStatus
    {
        $url = "offers/${offerId}/price";
        $options = [
            'body' => Model\UpdateOfferPriceRequest::constructFromArray(['pricing' => $pricing]),
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Update stock for offer by id.
     * @param string $offerId
     * @param Model\UpdateOfferStockRequest $updateOfferStockRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function updateOfferStock(string $offerId, Model\UpdateOfferStockRequest $updateOfferStockRequest): Model\ProcessStatus
    {
        $url = "offers/${offerId}/stock";
        $options = [
            'body' => $updateOfferStockRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Gets a paginated list of all open orders sorted by date in descending order.
     * @param int $page The requested page number with a page size of 50 items.
     * @param string $fulfilmentMethod The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).
     * @return Model\ReducedOrder[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getOrders(int $page = 1, string $fulfilmentMethod = 'FBR'): array
    {
        $url = "orders";
        $options = [
            'query' => [
                'page' => $page,
                'fulfilment-method' => $fulfilmentMethod,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\ReducedOrders::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->orders;
    }

    /**
     * This endpoint can be used to either confirm a cancellation request by the customer or to cancel an order item you yourself are unable to fulfil.
     * @param Model\OrderItemCancellation[] $orderItems
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function cancelOrderItem(array $orderItems): Model\ProcessStatus
    {
        $url = "orders/cancellation";
        $options = [
            'body' => Model\ContainerForTheOrderItemsThatHaveToBeCancelled::constructFromArray(['orderItems' => $orderItems]),
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Ship a single order item within a customer order by providing shipping information. In case you purchased a shipping label you can add the shippingLabelId to this message; in that case the transport element must be left empty. If you ship the item(s) using your own transporter method you must omit the shippingLabelId entirely.
     * @param Model\ShipmentRequest $shipmentRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function shipOrderItem(Model\ShipmentRequest $shipmentRequest): Model\ProcessStatus
    {
        $url = "orders/shipment";
        $options = [
            'body' => $shipmentRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Gets an open order by order id.
     * @param string $orderId
     * @return Model\Order|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getOrder(string $orderId): ?Model\Order
    {
        $url = "orders/${orderId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\Order::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Currently this endpoint only supports the allowable retail price and can support the following use cases:<br /><br />
                    1) EANs that have been unpublished due to price related reasons can be checked against this endpoint.<br />
                    2) Requesting the allowable retail price for EANs that are not yet in your assortment can help inform price setting.
     * @param string $ean
     * @return Model\RetailPrice[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getRetailPrice(string $ean): array
    {
        $url = "pricing/retail-prices/${ean}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\RetailPriceResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->retailPrices;
    }

    /**
     * Retrieve a list of process statuses, which shows information regarding previously executed PUT/POST/DELETE requests in descending order. You need to supply an entity id and event type. Please note: process status instances are only retained for a limited period of time after completion. Outside of this period, deleted process statuses will no longer be returned. Please handle this accordingly, by stopping any active polling for these statuses.
     * @param string $entityId
     * @param string $eventType
     * @param int $page The requested page number with a page size of 50 items.
     * @return Model\ProcessStatus[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProcessStatusEntityId(string $entityId, string $eventType, int $page = 1): array
    {
        $url = "process-status";
        $options = [
            'query' => [
                'entity-id' => $entityId,
                'event-type' => $eventType,
                'page' => $page,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\ProcessStatusResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->processStatuses;
    }

    /**
     * Retrieve a list of process statuses, which shows information regarding previously executed PUT/POST/DELETE requests. No more than 1000 process status id's can be sent in a single request.Please note: process status instances are only retained for a limited period of time after completion. Outside of this period, deleted process statuses will no longer be returned. Please handle this accordingly, by stopping any active polling for these statuses.
     * @param Model\ProcessStatusId[] $processStatusQueries
     * @return Model\ProcessStatus[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProcessStatusBulk(array $processStatusQueries): array
    {
        $url = "process-status";
        $options = [
            'body' => Model\BulkProcessStatusRequest::constructFromArray(['processStatusQueries' => $processStatusQueries]),
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\ProcessStatusResponse::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes)->processStatuses;
    }

    /**
     * Retrieve a specific process-status, which shows information regarding a previously executed PUT/POST/DELETE request. All PUT/POST/DELETE requests on the other endpoints will supply a process-status-id in the related response. You can use this id to retrieve a status by using the endpoint below. Please note: process status instances are only retained for a limited period of time after completion. Outside of this period, a 404 will be returned for missing process statuses. Please handle this accordingly, by stopping any active polling for these statuses.
     * @param int $processStatusId
     * @return Model\ProcessStatus|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProcessStatus(int $processStatusId): ?Model\ProcessStatus
    {
        $url = "process-status/${processStatusId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\ProcessStatus::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Get a paginated list of multi-item returns, which are sorted by date in descending order.
     * @param bool $handled
     * @param int $page The page to get with a page size of 50.
     * @param string $fulfilmentMethod The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).
     * @return Model\ReducedReturn[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getReturns(bool $handled, int $page = 1, string $fulfilmentMethod = 'FBR'): array
    {
        $url = "returns";
        $options = [
            'query' => [
                'handled' => $handled,
                'page' => $page,
                'fulfilment-method' => $fulfilmentMethod,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\ReturnsResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->returns;
    }

    /**
     * Create a return, and automatically handle it with the provided handling result. When successfully created, the resulting return id is provided in the process status.
     * @param Model\CreateReturnRequest $createReturnRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function createReturn(Model\CreateReturnRequest $createReturnRequest): Model\ProcessStatus
    {
        $url = "returns";
        $options = [
            'body' => $createReturnRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve a return based on the return id.
     * @param int $returnId
     * @return Model\ReturnObject|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getReturn(int $returnId): ?Model\ReturnObject
    {
        $url = "returns/${returnId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\ReturnObject::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Allows the user to handle a return. This can be to either handle an open return, or change the handlingResult of an already handled return. The latter is only possible in limited scenarios, please check the returns documentation for a complete list.
     * @param int $rmaId
     * @param Model\ReturnRequest $returnRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function handleReturn(int $rmaId, Model\ReturnRequest $returnRequest): Model\ProcessStatus
    {
        $url = "returns/${rmaId}";
        $options = [
            'body' => $returnRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * A paginated list to retrieve all your shipments up to 3 months old. The shipments will be sorted by date in descending order.
     * @param string $orderId
     * @param int $page The page to get with a page size of 50.
     * @param string $fulfilmentMethod The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).
     * @return Model\ReducedShipment[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getShipments(string $orderId, int $page = 1, string $fulfilmentMethod = 'FBR'): array
    {
        $url = "shipments";
        $options = [
            'query' => [
                'order-id' => $orderId,
                'page' => $page,
                'fulfilment-method' => $fulfilmentMethod,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\ShipmentResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->shipments;
    }

    /**
     * Retrieve a single shipment by its corresponding id.
     * @param int $shipmentId
     * @return Model\Shipment|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getShipment(int $shipmentId): ?Model\Shipment
    {
        $url = "shipments/${shipmentId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\Shipment::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Create a shipping label with a shipping label offer id retrieved from get delivery options.
     * @param Model\ShippingLabelRequest $shippingLabelRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function createShippingLabel(Model\ShippingLabelRequest $shippingLabelRequest): Model\ProcessStatus
    {
        $url = "shipping-labels";
        $options = [
            'body' => $shippingLabelRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieves all available delivery options based on the supplied configuration of order items that has to be shipped.
     * @param Model\OrderItem[] $orderItems
     * @return Model\DeliveryOption[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getDeliveryOptions(array $orderItems): array
    {
        $url = "shipping-labels/delivery-options";
        $options = [
            'body' => Model\DeliveryOptionsRequest::constructFromArray(['orderItems' => $orderItems]),
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\DeliveryOptionsResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('POST', $url, $options, $responseTypes);
        return $result === null ? [] : $result->deliveryOptions;
    }

    /**
     * Gets a shipping label by shipping label id.
     * @param string $shippingLabelId
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getShippingLabel(string $shippingLabelId): ?string
    {
        $url = "shipping-labels/${shippingLabelId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+pdf',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Retrieve a list of all configured and active push notification subscriptions.
     * @return Model\SubscriptionResponse[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getPushNotificationSubscriptions(): array
    {
        $url = "subscriptions";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\SubscriptionsResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->subscriptions;
    }

    /**
     * Create a push notification subscription for one (or more) of the available resources. The configured URL has to support https scheme.
     * @param Model\CreateSubscriptionRequest $createSubscriptionRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postPushNotificationSubscription(Model\CreateSubscriptionRequest $createSubscriptionRequest): Model\ProcessStatus
    {
        $url = "subscriptions";
        $options = [
            'body' => $createSubscriptionRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve a list of public keys that should be used to validate the signature header for push notifications received from bol.com
     * @return Model\KeySet[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getSubscriptionKeys(): array
    {
        $url = "subscriptions/signature-keys";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\KeySetResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->signatureKeys;
    }

    /**
     * Send a test push notification to all subscriptions for the provided event.
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postTestPushNotification(): Model\ProcessStatus
    {
        $url = "subscriptions/test";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve a configured and active push notification subscription with the provided id.
     * @param int $subscriptionId
     * @return Model\SubscriptionResponse|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getPushNotificationSubscription(int $subscriptionId): ?Model\SubscriptionResponse
    {
        $url = "subscriptions/${subscriptionId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '200' => Model\SubscriptionResponse::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Update an existing push notification subscription with the supplied id. The configured URL has to support https scheme.
     * @param int $subscriptionId
     * @param Model\UpdateSubscriptionRequest $updateSubscriptionRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function putPushNotificationSubscription(int $subscriptionId, Model\UpdateSubscriptionRequest $updateSubscriptionRequest): Model\ProcessStatus
    {
        $url = "subscriptions/${subscriptionId}";
        $options = [
            'body' => $updateSubscriptionRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Delete a push notification subscription with the provided id.
     * @param int $subscriptionId
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function deletePushNotificationSubscription(int $subscriptionId): Model\ProcessStatus
    {
        $url = "subscriptions/${subscriptionId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('DELETE', $url, $options, $responseTypes);
    }

    /**
     * Add information to an existing transport. The transport id is part of the shipment. You can retrieve the transport id through the GET shipment list request.
     * @param int $transportId
     * @param Model\ChangeTransportRequest $changeTransportRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function addTransportInformationByTransportId(int $transportId, Model\ChangeTransportRequest $changeTransportRequest): Model\ProcessStatus
    {
        $url = "transports/${transportId}";
        $options = [
            'body' => $changeTransportRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }
}
